{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMiIFrsoOdo3UzR+PLsOm38"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IToHAs5HOg1l","executionInfo":{"status":"ok","timestamp":1716497611457,"user_tz":300,"elapsed":196,"user":{"displayName":"Yamile Chamorro","userId":"12526049234870412899"}},"outputId":"8e95087b-6bb2-4b3d-e880-041b47278165"},"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio:  1.5566634589821722\n","R-cuadrado:  0.18735666294434172\n"]}],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.pipeline import Pipeline\n","from sklearn.compose import ColumnTransformer\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.metrics import mean_squared_error, r2_score\n","import joblib\n","\n","# Cargar el conjunto de datos\n","file_path = \"DATA.csv\"\n","column_names = [\n","    \"Student ID\", \"Student Age\", \"Sex\", \"Graduated high-school type\", \"Scholarship type\",\n","    \"Additional work\", \"Regular artistic or sports activity\", \"Do you have a partner\",\n","    \"Total salary if available\", \"Transportation to the university\", \"Accommodation type in Cyprus\",\n","    \"Mothers' education\", \"Fathers' education\", \"Number of sisters/brothers\", \"Parental status\",\n","    \"Mothers' occupation\", \"Fathers' occupation\", \"Weekly study hours\", \"Reading frequency (non-scientific books/journals)\",\n","    \"Reading frequency (scientific books/journals)\", \"Attendance to the seminars/conferences related to the department\",\n","    \"Impact of your projects/activities on your success\", \"Attendance to classes\", \"Preparation to midterm exams 1\",\n","    \"Preparation to midterm exams 2\", \"Taking notes in classes\", \"Listening in classes\",\n","    \"Discussion improves my interest and success in the course\", \"Flip-classroom\",\n","    \"Cumulative grade point average in the last semester (/4.00)\", \"Expected Cumulative grade point average in the graduation (/4.00)\",\n","    \"Course ID\", \"OUTPUT Grade\"\n","]\n","df_mat = pd.read_csv(file_path, names=column_names)\n","\n","# Seleccionar las columnas importantes\n","important_attributes = [\n","    \"Student Age\",\n","    \"Sex\",\n","    \"Graduated high-school type\",\n","    \"Scholarship type\",\n","    \"Weekly study hours\",\n","    \"Attendance to classes\",\n","    \"Preparation to midterm exams 1\",\n","    \"Preparation to midterm exams 2\",\n","    \"Discussion improves my interest and success in the course\",\"Cumulative grade point average in the last semester (/4.00)\", \"Expected Cumulative grade point average in the graduation (/4.00)\"\n","]\n","selected_data = df_mat[important_attributes]\n","\n","# Crear las matrices de características (X) y objetivo (y)\n","X = selected_data.drop(['Cumulative grade point average in the last semester (/4.00)', 'Expected Cumulative grade point average in the graduation (/4.00)'], axis=1)\n","y = selected_data['Cumulative grade point average in the last semester (/4.00)']\n","\n","# Dividir el conjunto de datos en conjuntos de entrenamiento y prueba\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Definir los pasos de preprocesamiento para características numéricas y categóricas\n","numeric_features = ['Student Age', 'Weekly study hours']\n","numeric_transformer = Pipeline(steps=[\n","    ('scaler', StandardScaler())\n","])\n","\n","categorical_features = ['Sex', 'Graduated high-school type', 'Scholarship type', 'Attendance to classes', 'Preparation to midterm exams 1', 'Preparation to midterm exams 2']\n","categorical_transformer = Pipeline(steps=[\n","    ('onehot', OneHotEncoder())\n","])\n","\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', numeric_transformer, numeric_features),\n","        ('cat', categorical_transformer, categorical_features)\n","    ])\n","\n","# Crear un pipeline con preprocesamiento y modelo de regresión lineal\n","pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n","                           ('regressor', LinearRegression())])\n","\n","# Ajustar el pipeline\n","pipeline.fit(X_train, y_train)\n","\n","# Guardar el modelo entrenado\n","joblib.dump(pipeline, 'linear_regression_pipeline.pkl')\n","\n","# Realizar predicciones\n","y_pred = pipeline.predict(X_test)\n","\n","# Evaluar el modelo\n","mse = mean_squared_error(y_test, y_pred)\n","r2 = r2_score(y_test, y_pred)\n","\n","print(\"Error cuadrático medio: \", mse)\n","print(\"R-cuadrado: \", r2)"]}]}